name: Application Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'prod'
        type: choice
        options:
        - prod
      force_deploy:
        description: 'Force deployment (skip health checks)'
        required: false
        default: false
        type: boolean
  workflow_run:
    workflows: ["Application CI Tests"] # Name of the cd-test.yml workflow
    types:
      - completed
    branches: [main]

env:
  DEPLOY_USER: jack
  DEPLOY_PATH: /home/jack/JACK
  REPO_NAME: tg-bot-template

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Run if manually dispatched OR if the 'Application CI Tests' workflow on 'main' succeeded
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Checkout the specific commit from the completed 'cd-test' workflow run
        # or the latest commit on 'main' if manually dispatched.
        ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.ref }}

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to server
      run: |
        # Set deployment options
        DEPLOY_OPTIONS=""
        
        # For manual dispatch, check input. For workflow_run, force_deploy isn't an input.
        if [[ "${{ github.event_name == 'workflow_dispatch' && github.event.inputs.force_deploy }}" == "true" ]]; then
          DEPLOY_OPTIONS="$DEPLOY_OPTIONS --force"
        fi
        
        # Determine environment (only relevant for manual dispatch, deploy.sh handles env from .env file)
        # ENV_FILE_ARG=""
        # if [[ "${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment }}" == "prod" ]]; then
        #   ENV_FILE_ARG="--env-file /home/${{ env.DEPLOY_USER }}/configs/.env" # Example, adjust as needed
        # fi

        # Execute deployment
        ssh ${{ env.DEPLOY_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          
          # Navigate to deployment directory
          cd ${{ env.DEPLOY_PATH }}/${{ env.REPO_NAME }}
          
          # Pull latest changes from main branch (deploy.sh handles this, but good for consistency if not using workflow_run's SHA)
          # If using workflow_run's head_sha, the checkout above already has the correct commit.
          # Consider if an explicit git pull main is still needed if deploy.sh already does it.
          # For now, keeping it similar to original for deploy.sh to manage.
          git fetch origin
          git checkout main
          git pull origin main
          
          # Make deployment scripts executable
          chmod +x deployment/*.sh
          
          # Run deployment
          # The --branch "main" might be redundant if head_sha is checked out.
          # The --repo-url is also usually for the initial clone by deploy.sh if the repo isn't there.
          ./deployment/deploy.sh \
            --repo-url "${{ github.repositoryUrl }}" \
            --branch "main" \
            --env-file "/home/${{ env.DEPLOY_USER }}/configs/.env" \
            $DEPLOY_OPTIONS
        EOF

    - name: Verify deployment
      run: |
        ssh ${{ env.DEPLOY_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          # Check service status
          systemctl is-active ${{ env.REPO_NAME }}.service
          
          # Run health check
          cd ${{ env.DEPLOY_PATH }}/${{ env.REPO_NAME }}
          ./deployment/health-check.sh --post-deployment
        EOF

    - name: Notify success
      if: success()
      run: |
        if [[ -n "${{ secrets.TELEGRAM_BOT_TOKEN }}" && -n "${{ secrets.TELEGRAM_CHAT_ID }}" ]]; then
          MESSAGE="✅ Deployment successful for ${{ github.repository }} (commit: ${{ github.sha }})"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=${MESSAGE}"
          echo
        else
          echo "Telegram Bot Token or Chat ID not configured. Skipping success notification."
        fi

    - name: Notify failure
      if: failure()
      run: |
        if [[ -n "${{ secrets.TELEGRAM_BOT_TOKEN }}" && -n "${{ secrets.TELEGRAM_CHAT_ID }}" ]]; then
          MESSAGE="❌ Deployment failed for ${{ github.repository }} (commit: ${{ github.sha }})"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=${MESSAGE}"
          echo
        else
          echo "Telegram Bot Token or Chat ID not configured. Skipping failure notification."
        fi
rollback:
    runs-on: ubuntu-latest
    if: failure() && needs.deploy.result == 'failure' 
    needs: [deploy] 
    
    steps:
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Automatic rollback
      run: |
        ssh ${{ env.DEPLOY_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          
          cd ${{ env.DEPLOY_PATH }}/${{ env.REPO_NAME }}
          
          # Find latest backup
          LATEST_BACKUP=$(find deployment/backups -name "backup_*.sql*" -type f | sort -r | head -1)
          
          if [[ -n "$LATEST_BACKUP" ]]; then
            echo "Rolling back using backup: $LATEST_BACKUP"
            ./deployment/rollback.sh \
              --backup-file "$LATEST_BACKUP" \
              --git-commit "HEAD~1" \
              --force
          else
            echo "No backup found, rolling back code only"
            ./deployment/rollback.sh \
              --no-database \
              --git-commit "HEAD~1" \
              --force
          fi
        EOF

    - name: Notify rollback
      run: |
        if [[ -n "${{ secrets.TELEGRAM_BOT_TOKEN }}" && -n "${{ secrets.TELEGRAM_CHAT_ID }}" ]]; then
          MESSAGE="🔄 Automatic rollback completed for ${{ github.repository }}"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=${MESSAGE}"
          echo
        else
          echo "Telegram Bot Token or Chat ID not configured. Skipping rollback notification."
        fi